{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,QAAQ,MAAM,kBAAkB,CAAC;AAUxC,MAAM,OAAO,WAAY,SAAQ,SAAS;IAGxC;QACE,KAAK,EAAE,CAAC;QAHF,oBAAe,GAAG,EAAE,CAAC;QAI3B,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAA0C;QACzD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QACvD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAA2C;QACrD,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,OAA+B;QAC5C,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAA8C;QACxD,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,KAAK;QACT,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,oBAAoB;QACxB,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YACjD,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SACxB;QACD,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,OAAO,OAAO,CAAC,OAAO,CAAC;YACrB,UAAU,EAAE,IAAI,CAAC,eAAe;SACjC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,OAA4B;QACxD,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAA4B;QAC3C,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACxC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAA4C;QAC5D,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;IACnE,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport mixpanel from 'mixpanel-browser';\n\nimport type { MixpanelPlugin } from './definitions';\n\ndeclare global {\n  interface Window {\n    mixpanel: any;\n  }\n}\n\nexport class MixpanelWeb extends WebPlugin implements MixpanelPlugin {\n  private superProperties = {};\n\n  constructor() {\n    super();\n    window.mixpanel = mixpanel;\n  }\n\n  async initialize(options: { token: string, debug: boolean }): Promise<void> {\n    mixpanel.init(options.token, { debug: options.debug });\n    return Promise.resolve();\n  }\n\n  async track(options: { event: string, properties: any }): Promise<void> {\n    mixpanel.track(options.event, options.properties);\n    return Promise.resolve();\n  }\n\n  async identify(options: { distinctId: string }): Promise<void> {\n    mixpanel.identify(options.distinctId);\n    return Promise.resolve();\n  }\n\n  async alias(options: { alias: string, distinctId: string }): Promise<void> {\n    mixpanel.alias(options.alias, options.distinctId);\n    return Promise.resolve();\n  }\n\n  async reset(): Promise<void> {\n    mixpanel.reset();\n    return Promise.resolve();\n  }\n\n  async clearSuperProperties(): Promise<void> {\n    for (const k of Object.keys(this.superProperties)) {\n      mixpanel.unregister(k);\n    }\n    this.superProperties = {};\n    return Promise.resolve();\n  }\n\n  async currentSuperProperties(): Promise<{ properties: any }> {\n    return Promise.resolve({\n      properties: this.superProperties,\n    });\n  }\n\n  async registerSuperProperties(options: { properties: any }): Promise<void> {\n    mixpanel.register(options.properties);\n    return Promise.resolve();\n  }\n\n  async setProfile(options: { properties: any }): Promise<void> {\n    mixpanel.people.set(options.properties);\n    return Promise.resolve();\n  }\n\n  async trackCharge(options: { amount: number, properties: any }): Promise<void> {\n    mixpanel.people.track_charge(options.amount, options.properties);\n  }\n}\n"]}