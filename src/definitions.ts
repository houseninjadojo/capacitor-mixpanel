/// <reference types="@capacitor/cli" />


export interface InitializeOptions {
  /**
   * Your Mixpanel API token
   * 
   * @required
   */
  token: string;
  /**
   * Enable or disable autotracking
   * 
   * @default true
   */
  autotrack?: boolean;
  /**
   * Opting users out of tracking by this Mixpanel instance by default
   * 
   * @default false
   */
  optOutByDefault?: boolean;
  /**
   * Enable or disable debug mode
   * 
   * @default false
   */
  debug?: boolean;
}

export interface TrackOptions {
  /**
   * The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.
   * 
   * @required
   */
  event: string;
  /**
   * A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.
   *
   * @default {}
   */
  properties?: TrackProperties;
}

export interface TrackProperties {
  [key: string]: any;
}

export interface IdentifyOptions {
  /**
   * A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.
   */
  distinctId?: string;
}

export interface AliasOptions {
  /**
   * A unique identifier that you want to use for this user in the future.
   * 
   * @required
   */
  alias: string;
  /**
   * The current identifier being used for this user.
   */
  distinctId?: string
}

export interface SuperPropertyOptions {
  /**
   * An associative array of properties to store about the user
   * 
   * @required
   */
  properties?: any;
}

export interface ProfileProperties {
  /**
   * An associative array of properties to store about the user
   * 
   * @required
   */
  properties?: any;
}

export interface ChargeOptions {
  /**
   * The amount of the transaction
   * 
   * @required
   */
  amount: number;
  /**
   * An associative array of properties to store about the transaction
   * 
   * @default {}
   */
  properties?: any;
}

export interface OptInOptions {
  /**
   * String that uniquely identifies the current user.
   */
  distinctId?: string;
  /**
   * An associative array of properties to store about the user
   */
  properties?: any;
}

export interface MixpanelPlugin {
  /**
   * Initialize the plugin (web only)
   * 
   * @platforms web
   */
  initialize(options: InitializeOptions): Promise<void>;

  /**
   * Returns the current distinct id of the user. This is either the id automatically generated by the library or the id that has been passed by a call to identify().
   * 
   * @platforms ios, android, web
   */
  distinctId(): Promise<{ value: string}>;

  /**
   * Tracks an event with properties. Properties are optional and can be added only if needed.
   * 
   * @platforms ios, android, web
   */
  track(options: TrackOptions): Promise<void>;

  /**
   * Identify a user with a unique ID to track user activity across devices, tie a user to their events, and create a user profile. If you never call this method, unique visitors are tracked using a UUID generated the first time they visit the site.
   * 
   * @platforms ios, android, web
   */
  identify(options: IdentifyOptions): Promise<void>;

  /**
   * The alias method creates an alias which Mixpanel will use to remap one id to another. Multiple aliases can point to the same identifier.
   *
   * @platforms ios, android, web 
   */
  alias(options: AliasOptions): Promise<void>;

  /**
   * Clears super properties and generates a new random distinct_id for this instance. Useful for clearing data when a user logs out.
   * 
   * @platforms ios, android, web
   */
  reset(): Promise<void>;

  /**
   * Clears all currently set super properties.
   * 
   * @platforms ios, android, web
   */
  clearSuperProperties(): Promise<void>;

  /**
   * Returns the currently set super properties.
   * 
   * @platforms ios, android, web
   */
  currentSuperProperties(): Promise<{ properties: any }>;
  
  /**
   * Register super properties that will be sent with every event.
   * 
   * @platforms ios, android, web
   */
  registerSuperProperties(options: SuperPropertyOptions): Promise<void>;
  
  /**
   * Set properties on the current user in Mixpanel People.
   * 
   * @platforms ios, android, web
   */
  setProfile(options: ProfileProperties): Promise<void>;
  
  /**
   * Union list properties.
   * 
   * @platforms ios, android, web
   */
  setProfileUnion(options: ProfileProperties): Promise<void>;
  
  /**
   * Permanently deletes the current people analytics profile from Mixpanel (using the current distinctId).
   * 
   * @platforms ios, android, web
   */
  deleteProfile(): Promise<void>;

  /**
   * Track money spent by the current user for revenue analytics and associate properties with the charge. Properties is optional.
   *
   * @platforms ios, android, web
   */
  trackCharge(options: ChargeOptions): Promise<void>;
  
  /**
   * Uploads queued data to the Mixpanel server. (only ios, android)
   *
   * @platforms ios, android
   */
  flush(): Promise<void>;

  /**
   * Opt in tracking.
   *
   * Use this method to opt in an already opted out user from tracking. People updates and track calls will be sent to Mixpanel after using this method.
   *
   * @platforms ios, android, web
   */
  optInTracking(options: OptInOptions): Promise<void>;

  /**
   * Opt out tracking.
   *
   * This method is used to opt out tracking. This causes all events and people request no longer to be sent back to the Mixpanel server.
   *
   * @platforms ios, android, web
   */
  optOutTracking(): Promise<void>;
}

declare module '@capacitor/cli' {
  export interface PluginsConfig {
    Mixpanel?: {
      /**
       * Mixpanel Token
       *
       * @required
       * @example "asdf1234asdf1234"
       */
      token: string;

      /**
       * Optional. Whether or not to collect common mobile events. Default is true.
       *
       * @default true
       */
      trackAutomaticEvents?: boolean;

      /**
       * Optional. Whether or not Mixpanel can start tracking immediately. Default is false.
       *
       * @required
       * @default false
       */
      optOutTrackingByDefault?: boolean;

      /**
       * Optional. Mixpanel cluster URL or EU server URL. Defaults to US server.
       *
       * @default "https://api.mixpanel.com"
       * @example "https://api-eu.mixpanel.com/"
       */
      serverURL?: string;
    };
  }
}
